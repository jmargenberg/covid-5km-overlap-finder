{"version":3,"sources":["components/Map.jsx","components/AlgoliaAddressInput.jsx","components/ControlBar.jsx","components/SponsorshipBanner.jsx","App.js","serviceWorker.js","index.js"],"names":["MapBox","ReactMapboxGl","accessToken","process","INITIAL_BOUNDS","COVID_LOCKDOWN_CIRCLE_OPTIONS","steps","units","MAP_BOX_STYLES","myExclusiveAreaLinePaint","myExclusiveAreaFillPaint","theirExclusiveAreaLinePaint","theirExclusiveAreaFillPaint","inaccessibleAreaFillPaint","notFalsy","foo","Map","props","myLocation","theirLocation","bothLocationsSet","undefined","oneLocationSet","myLockdownArea","turf","theirLockdownArea","sharedLockdownArea","myExclusiveLockdownArea","theirExclusiveLockdownArea","allLockdownAreas","filter","inaccessibleArea","mapFocusProps","minLng","minLat","maxLng","maxLat","boundsPadding","fitBounds","style","containerStyle","flex","movingMethod","data","linePaint","fillPaint","ALGOLIA_PLACES_OPTIONS","appId","apiKey","language","countries","aroundLatLng","aroundRadius","AddressInputContainer","styled","div","AddressInput","onLocationSelected","placeholder","onPlaceSelected","a","suggestion","location","latlng","lng","lat","onClear","options","onChange","onLimit","alert","ControlBarContentsContainer","ControlBar","myLocationSelected","theirLocationSelected","AlgoliaAddressInput","BannerContainer","BannerHeader","BannerTitle","h4","ExpandChevronContainer","ExplanationContainer","ExplanationParagraph","p","Link","SponsorshipBanner","useState","showExplanation","setShowExplanation","toggleExplanation","currShowExplanation","onClick","icon","faChevronUp","faChevronDown","display","className","href","AppContainer","MapContainer","library","add","ReactGA","initialize","pageview","window","pathname","search","App","setMyLocation","setTheirLocation","backgroundColor","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f3c28de.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactMapboxGl, { GeoJSONLayer } from \"react-mapbox-gl\";\nimport * as turf from \"@turf/turf\";\n\nconst MapBox = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_MAPBOX_API_KEY,\n});\n\nconst INITIAL_BOUNDS = [\n  [145.151596, -37.723742],\n  [144.793065, -37.927951],\n];\nconst BOUNDS_PADDING_KM_ONE_LOCATION = 5;\nconst BOUNDS_PADDING_KM_BOTH_LOCATIONS = 1;\nconst COVID_LOCKDOWN_RADIUS_KM = 5;\nconst COVID_LOCKDOWN_CIRCLE_OPTIONS = { steps: 1_000, units: \"kilometers\" };\n\nconst MAP_BOX_STYLES = {\n  myExclusiveAreaLinePaint: {\n    \"line-color\": \"#5eb0c2\",\n    \"line-width\": 1,\n  },\n  myExclusiveAreaFillPaint: {\n    \"fill-color\": \"#5eb0c2\",\n    \"fill-opacity\": 0.25,\n  },\n  theirExclusiveAreaLinePaint: {\n    \"line-color\": \"#52bf83\",\n    \"line-width\": 1,\n  },\n  theirExclusiveAreaFillPaint: {\n    \"fill-color\": \"#52bf83\",\n    \"fill-opacity\": 0.25,\n  },\n  inaccessibleAreaFillPaint: {\n    \"fill-color\": \"black\",\n    \"fill-opacity\": 0.25,\n  },\n};\n\nconst notFalsy = (foo) => foo;\n\nconst Map = (props) => {\n  const { myLocation, theirLocation } = props;\n\n  const bothLocationsSet = myLocation !== undefined && theirLocation !== undefined;\n  const oneLocationSet = (myLocation !== undefined || theirLocation !== undefined) && !bothLocationsSet;\n\n  // Determine each users total lockdown area\n  const myLockdownArea = myLocation && turf.circle(myLocation, COVID_LOCKDOWN_RADIUS_KM, COVID_LOCKDOWN_CIRCLE_OPTIONS);\n  const theirLockdownArea =\n    theirLocation && turf.circle(theirLocation, COVID_LOCKDOWN_RADIUS_KM, COVID_LOCKDOWN_CIRCLE_OPTIONS);\n\n  // Determine the shared lockdown area (if any)\n  const sharedLockdownArea = bothLocationsSet ? turf.intersect(myLockdownArea, theirLockdownArea) : undefined;\n\n  // Determine each users exclusive lockdown area (their entire lockdown area if only one provided)\n  const myExclusiveLockdownArea = bothLocationsSet\n    ? turf.difference(myLockdownArea, theirLockdownArea)\n    : myLockdownArea;\n  const theirExclusiveLockdownArea = bothLocationsSet\n    ? turf.difference(theirLockdownArea, myLockdownArea)\n    : theirLockdownArea;\n\n  // Combing all lockdown areas into one feature collection\n  const allLockdownAreas = turf.featureCollection(\n    [myExclusiveLockdownArea, theirExclusiveLockdownArea, sharedLockdownArea].filter(notFalsy)\n  );\n\n  // Determine everywhere that is not within either user's lockdown areas\n  const inaccessibleArea = turf.mask(allLockdownAreas);\n\n  // Determine the maps bounds\n  let mapFocusProps = {};\n\n  if (bothLocationsSet || oneLocationSet) {\n    // Zoom to fit both users lockdown areas\n    const [minLng, minLat, maxLng, maxLat] = turf.bbox(allLockdownAreas);\n    const boundsPadding = bothLocationsSet\n      ? turf.lengthToDegrees(BOUNDS_PADDING_KM_BOTH_LOCATIONS, \"kilometers\")\n      : turf.lengthToDegrees(BOUNDS_PADDING_KM_ONE_LOCATION, \"kilometers\");\n\n    mapFocusProps = {\n      fitBounds: [\n        [minLng - boundsPadding, minLat - boundsPadding],\n        [maxLng + boundsPadding, maxLat + boundsPadding],\n      ],\n    };\n  } else {\n    // Center map on the Melbourne CBD\n    mapFocusProps = {\n      fitBounds: INITIAL_BOUNDS,\n    };\n  }\n\n  return (\n    <MapBox\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      containerStyle={{\n        flex: 1,\n      }}\n      movingMethod=\"flyTo\" // ensures the map animates on location change\n      {...mapFocusProps}\n    >\n      <GeoJSONLayer\n        data={turf.featureCollection([myExclusiveLockdownArea].filter(notFalsy))}\n        linePaint={MAP_BOX_STYLES.myExclusiveAreaLinePaint}\n        fillPaint={MAP_BOX_STYLES.myExclusiveAreaFillPaint}\n      ></GeoJSONLayer>\n      <GeoJSONLayer\n        data={turf.featureCollection([theirExclusiveLockdownArea].filter(notFalsy))}\n        linePaint={MAP_BOX_STYLES.theirExclusiveAreaLinePaint}\n        fillPaint={MAP_BOX_STYLES.theirExclusiveAreaFillPaint}\n      ></GeoJSONLayer>\n      <GeoJSONLayer data={inaccessibleArea} fillPaint={MAP_BOX_STYLES.inaccessibleAreaFillPaint}></GeoJSONLayer>\n    </MapBox>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\nimport AlgoliaPlaces from \"algolia-places-react\";\n\nimport styled from \"styled-components\";\n\nconst ALGOLIA_PLACES_OPTIONS = {\n  appId: process.env.REACT_APP_ALGOLIA_PLACES_APP_ID,\n  apiKey: process.env.REACT_APP_ALGOLIA_PLACES_API_KEY,\n  language: \"en\",\n  countries: [\"au\"],\n  aroundLatLng: \"-37.816204,144.957489\", // Melbourne CBD\n  aroundRadius: 70_000, // 70km\n};\n\nconst AddressInputContainer = styled.div`\n  flex: 1;\n\n  margin: 5px;\n`;\n\nconst AddressInput = (props) => {\n  const { onLocationSelected, placeholder } = props;\n\n  const onPlaceSelected = async ({ suggestion }) => {\n    const location = [suggestion?.latlng?.lng, suggestion?.latlng?.lat];\n\n    await onLocationSelected(location);\n  };\n\n  const onClear = async () => {\n    onLocationSelected(undefined);\n  };\n\n  const onLimit = () => {\n    alert(\"Too many requests from your IP. Sorry but address search requests aren't cheap 😬\");\n  };\n\n  return (\n    <AddressInputContainer>\n      <AlgoliaPlaces\n        placeholder={placeholder}\n        options={ALGOLIA_PLACES_OPTIONS}\n        onChange={onPlaceSelected}\n        onClear={onClear}\n        onLimit={onLimit}\n      />\n    </AddressInputContainer>\n  );\n};\n\nexport default AddressInput;\n","import React from \"react\";\nimport AlgoliaAddressInput from \"./AlgoliaAddressInput\";\n\nimport styled from \"styled-components\";\n\nconst ControlBarContentsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  max-width: 500px;\n  margin: 5px;\n`;\n\nconst ControlBar = (props) => {\n  const { myLocationSelected, theirLocationSelected } = props;\n\n  return (\n    <ControlBarContentsContainer>\n      <AlgoliaAddressInput onLocationSelected={myLocationSelected} placeholder=\"Where do you live?\" />\n      <AlgoliaAddressInput onLocationSelected={theirLocationSelected} placeholder=\"Where do they live?\" />\n    </ControlBarContentsContainer>\n  );\n};\n\nexport default ControlBar;\n","import React, { useState } from \"react\";\n\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./DonateBanner.css\";\n\nconst BannerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  max-width: 500px;\n  background-color: orange;\n`;\n\nconst BannerHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  margin-top: 5px;\n  margin-bottom: 5px;\n  margin-left: 20px;\n  margin-right: 20px;\n`;\n\nconst BannerTitle = styled.h4`\n  flex-grow: 2;\n  color: #333333;\n  text-align: center;\n\n  margin-top: 10px;\n  margin-bottom: 10px;\n  margin-left: 0px;\n  margin-right: 15px;\n`;\n\nconst ExpandChevronContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n\n  margin-left: 15px;\n`;\n\nconst ExplanationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  margin-left: 40px;\n  margin-right: 40px;\n`;\n\nconst ExplanationParagraph = styled.p`\n  text-align: center;\n  font-size: 0.9em;\n\n  margin-top: 5px;\n  margin-bottom: 5px;\n  color: #333333;\n`;\n\nconst Link = styled.a`\n  color: #222;\n`;\n\nconst SponsorshipBanner = () => {\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const toggleExplanation = () => {\n    setShowExplanation((currShowExplanation) => !currShowExplanation);\n  };\n\n  return (\n    <BannerContainer>\n      <BannerHeader>\n        <BannerTitle onClick={toggleExplanation}>We are looking for a sponsor!</BannerTitle>\n\n        <ExpandChevronContainer onClick={toggleExplanation}>\n          <FontAwesomeIcon icon={showExplanation ? faChevronUp : faChevronDown} style={{ display: \"flex\" }} />\n        </ExpandChevronContainer>\n      </BannerHeader>\n      <ExplanationContainer className={showExplanation ? \"shown\" : \"hidden\"}>\n        <ExplanationParagraph>Melbourne users are loving this app!</ExplanationParagraph>\n        <ExplanationParagraph>\n          I'm receiving tonnes of traffic but unfortunately the costs (address search API fees) are getting too great\n          for me to fund out of my own pocket.\n        </ExplanationParagraph>\n        <ExplanationParagraph>\n          I'd be delighted if a brand, be it a news site, cultural site, digital brand or any business is interested in\n          adopting this site for full branding and/or redirection to a white-labeled version.\n        </ExplanationParagraph>\n\n        <ExplanationParagraph>\n          If you are interested please contact{\" \"}\n          <Link href=\"mailto:covid.5km.overlap.finder@gmail.com\">covid.5km.overlap.finder@gmail.com</Link>.\n        </ExplanationParagraph>\n      </ExplanationContainer>\n    </BannerContainer>\n  );\n};\n\nexport default SponsorshipBanner;\n","import React, { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport styled from \"styled-components\";\nimport ControlBar from \"./components/ControlBar\";\nimport ReactGA from \"react-ga\";\nimport SponsorshipBanner from \"./components/SponsorshipBanner\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\n\nconst AppContainer = styled.div`\n  height: 100vh;\n  position: absolute;\n  width: 100vw;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n`;\n\nconst BannerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  justify-content: center;\n`;\n\nconst MapContainer = styled.div`\n  flex-grow: 1;\n  display: flex;\n  align-items: stretch;\n  justify-content: stretch;\n`;\n\n// Initialise Fontawesome\nlibrary.add(faChevronDown, faChevronUp);\n\n// Initialise Google Analytics\nReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE);\nReactGA.pageview(window.location.pathname + window.location.search);\n\nfunction App() {\n  const [myLocation, setMyLocation] = useState(undefined);\n  const [theirLocation, setTheirLocation] = useState(undefined);\n\n  return (\n    <AppContainer>\n      <BannerContainer style={{ backgroundColor: \"orange\" }}>\n        <SponsorshipBanner />\n      </BannerContainer>\n      <BannerContainer>\n        <ControlBar myLocationSelected={setMyLocation} theirLocationSelected={setTheirLocation} />\n      </BannerContainer>\n      <MapContainer>\n        <Map myLocation={myLocation} theirLocation={theirLocation} />\n      </MapContainer>\n      {/* <BannerContainer>\n        <DonateBanner />\n      </BannerContainer> */}\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}