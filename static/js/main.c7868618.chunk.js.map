{"version":3,"sources":["components/Map.jsx","components/AddressInput.jsx","components/ControlBar.jsx","App.js","serviceWorker.js","index.js"],"names":["MapBox","ReactMapboxGl","accessToken","process","INITIAL_BOUNDS","COVID_LOCKDOWN_CIRCLE_OPTIONS","steps","units","MAP_BOX_STYLES","myExclusiveAreaLinePaint","myExclusiveAreaFillPaint","theirExclusiveAreaLinePaint","theirExclusiveAreaFillPaint","inaccessibleAreaFillPaint","notFalsy","foo","Map","props","myLocation","theirLocation","bothLocationsSet","undefined","oneLocationSet","myLockdownArea","turf","theirLockdownArea","sharedLockdownArea","myExclusiveLockdownArea","theirExclusiveLockdownArea","allLockdownAreas","filter","inaccessibleArea","mapFocusProps","minLng","minLat","maxLng","maxLat","boundsPadding","fitBounds","style","containerStyle","height","width","movingMethod","data","linePaint","fillPaint","AUTOCOMPLETION_SETTINGS","componentRestrictions","country","location","lat","lng","radius","AddressInputContainer","styled","div","AddressInput","onLocationSelected","placeholder","onPlaceSelected","place","a","placeId","value","place_id","geocodeByPlaceId","geocodeResult","length","geometry","apiKey","autocompletionRequest","minLengthAutocomplete","selectProps","onChange","ControlBarContentsContainer","ControlBar","myLocationSelected","theirLocationSelected","AppContainer","ControlBarContainer","MapContainer","ReactGA","initialize","pageview","window","pathname","search","App","useState","setMyLocation","setTheirLocation","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7868618.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactMapboxGl, { GeoJSONLayer } from \"react-mapbox-gl\";\nimport * as turf from \"@turf/turf\";\n\nconst MapBox = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_MAPBOX_API_KEY,\n});\n\nconst INITIAL_BOUNDS = [\n  [145.151596, -37.723742],\n  [144.793065, -37.927951],\n];\nconst BOUNDS_PADDING_KM_ONE_LOCATION = 5;\nconst BOUNDS_PADDING_KM_BOTH_LOCATIONS = 1;\nconst COVID_LOCKDOWN_RADIUS_KM = 5;\nconst COVID_LOCKDOWN_CIRCLE_OPTIONS = { steps: 1_000, units: \"kilometers\" };\n\nconst MAP_BOX_STYLES = {\n  myExclusiveAreaLinePaint: {\n    \"line-color\": \"#5eb0c2\",\n    \"line-width\": 1,\n  },\n  myExclusiveAreaFillPaint: {\n    \"fill-color\": \"#5eb0c2\",\n    \"fill-opacity\": 0.25,\n  },\n  theirExclusiveAreaLinePaint: {\n    \"line-color\": \"#52bf83\",\n    \"line-width\": 1,\n  },\n  theirExclusiveAreaFillPaint: {\n    \"fill-color\": \"#52bf83\",\n    \"fill-opacity\": 0.25,\n  },\n  inaccessibleAreaFillPaint: {\n    \"fill-color\": \"black\",\n    \"fill-opacity\": 0.25,\n  },\n};\n\nconst notFalsy = (foo) => foo;\n\nconst Map = (props) => {\n  const { myLocation, theirLocation } = props;\n\n  const bothLocationsSet = myLocation !== undefined && theirLocation !== undefined;\n  const oneLocationSet = (myLocation !== undefined || theirLocation !== undefined) && !bothLocationsSet;\n\n  // Determine each users total lockdown area\n  const myLockdownArea = myLocation && turf.circle(myLocation, COVID_LOCKDOWN_RADIUS_KM, COVID_LOCKDOWN_CIRCLE_OPTIONS);\n  const theirLockdownArea =\n    theirLocation && turf.circle(theirLocation, COVID_LOCKDOWN_RADIUS_KM, COVID_LOCKDOWN_CIRCLE_OPTIONS);\n\n  // Determine the shared lockdown area (if any)\n  const sharedLockdownArea = bothLocationsSet ? turf.intersect(myLockdownArea, theirLockdownArea) : undefined;\n\n  // Determine each users exclusive lockdown area (their entire lockdown area if only one provided)\n  const myExclusiveLockdownArea = bothLocationsSet\n    ? turf.difference(myLockdownArea, theirLockdownArea)\n    : myLockdownArea;\n  const theirExclusiveLockdownArea = bothLocationsSet\n    ? turf.difference(theirLockdownArea, myLockdownArea)\n    : theirLockdownArea;\n\n  // Combing all lockdown areas into one feature collection\n  const allLockdownAreas = turf.featureCollection(\n    [myExclusiveLockdownArea, theirExclusiveLockdownArea, sharedLockdownArea].filter(notFalsy)\n  );\n\n  // Determine everywhere that is not within either user's lockdown areas\n  const inaccessibleArea = turf.mask(allLockdownAreas);\n\n  // Determine the maps bounds\n  let mapFocusProps = {};\n\n  if (bothLocationsSet || oneLocationSet) {\n    // Zoom to fit both users lockdown areas\n    const [minLng, minLat, maxLng, maxLat] = turf.bbox(allLockdownAreas);\n    const boundsPadding = bothLocationsSet\n      ? turf.lengthToDegrees(BOUNDS_PADDING_KM_BOTH_LOCATIONS, \"kilometers\")\n      : turf.lengthToDegrees(BOUNDS_PADDING_KM_ONE_LOCATION, \"kilometers\");\n\n    mapFocusProps = {\n      fitBounds: [\n        [minLng - boundsPadding, minLat - boundsPadding],\n        [maxLng + boundsPadding, maxLat + boundsPadding],\n      ],\n    };\n  } else {\n    // Center map on the Melbourne CBD\n    mapFocusProps = {\n      fitBounds: INITIAL_BOUNDS,\n    };\n  }\n\n  return (\n    <MapBox\n      style=\"mapbox://styles/mapbox/streets-v11\"\n      containerStyle={{\n        height: \"100%\",\n        width: \"100%\",\n      }}\n      movingMethod=\"flyTo\" // ensures the map animates on location change\n      {...mapFocusProps}\n    >\n      <GeoJSONLayer\n        data={turf.featureCollection([myExclusiveLockdownArea].filter(notFalsy))}\n        linePaint={MAP_BOX_STYLES.myExclusiveAreaLinePaint}\n        fillPaint={MAP_BOX_STYLES.myExclusiveAreaFillPaint}\n      ></GeoJSONLayer>\n      <GeoJSONLayer\n        data={turf.featureCollection([theirExclusiveLockdownArea].filter(notFalsy))}\n        linePaint={MAP_BOX_STYLES.theirExclusiveAreaLinePaint}\n        fillPaint={MAP_BOX_STYLES.theirExclusiveAreaFillPaint}\n      ></GeoJSONLayer>\n      <GeoJSONLayer data={inaccessibleArea} fillPaint={MAP_BOX_STYLES.inaccessibleAreaFillPaint}></GeoJSONLayer>\n    </MapBox>\n  );\n};\n\nexport default Map;\n","import React from \"react\";\nimport GooglePlacesAutocomplete, { geocodeByPlaceId } from \"react-google-places-autocomplete\";\n\nimport styled from \"styled-components\";\n\nconst AUTOCOMPLETION_SETTINGS = {\n  componentRestrictions: { country: \"au\" },\n  location: { lat: -37.816204, lng: 144.957489 }, // Melbourne CBD\n  radius: 70_000, // 7km\n};\n\nconst AddressInputContainer = styled.div`\n  flex: 1;\n\n  margin: 5px;\n`;\n\nconst AddressInput = (props) => {\n  const { onLocationSelected, placeholder } = props;\n\n  const onPlaceSelected = async (place) => {\n    const placeId = place?.value?.place_id;\n    const geocodeResult = await geocodeByPlaceId(placeId);\n\n    if (geocodeResult?.length > 0) {\n      const location = [geocodeResult[0]?.geometry?.location?.lng(), geocodeResult[0]?.geometry?.location?.lat()];\n\n      await onLocationSelected(location);\n    }\n  };\n\n  return (\n    <AddressInputContainer>\n      <GooglePlacesAutocomplete\n        apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n        autocompletionRequest={AUTOCOMPLETION_SETTINGS}\n        minLengthAutocomplete={1}\n        selectProps={{\n          onChange: onPlaceSelected,\n          placeholder,\n        }}\n      />\n    </AddressInputContainer>\n  );\n};\n\nexport default AddressInput;\n","import React from \"react\";\nimport AddressInput from \"./AddressInput\";\n\nimport styled from \"styled-components\";\n\nconst ControlBarContentsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  max-width: 500px;\n  margin: 5px;\n`;\n\nconst ControlBar = (props) => {\n  const { myLocationSelected, theirLocationSelected } = props;\n\n  return (\n    <ControlBarContentsContainer>\n      <AddressInput onLocationSelected={myLocationSelected} placeholder=\"Where do you live?\" />\n      <AddressInput onLocationSelected={theirLocationSelected} placeholder=\"Where do they live?\" />\n    </ControlBarContentsContainer>\n  );\n};\n\nexport default ControlBar;\n","import React, { useState } from \"react\";\nimport Map from \"./components/Map\";\nimport styled from \"styled-components\";\nimport ControlBar from \"./components/ControlBar\";\nimport ReactGA from \"react-ga\";\n\nconst AppContainer = styled.div`\n  height: 100%;\n  position: absolute;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ControlBarContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  justify-content: center;\n`;\n\nconst MapContainer = styled.div`\n  flex-grow: 1;\n`;\n\nReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE);\nReactGA.pageview(window.location.pathname + window.location.search);\n\nfunction App() {\n  const [myLocation, setMyLocation] = useState(undefined);\n  const [theirLocation, setTheirLocation] = useState(undefined);\n\n  return (\n    <AppContainer>\n      <ControlBarContainer>\n        <ControlBar myLocationSelected={setMyLocation} theirLocationSelected={setTheirLocation} />\n      </ControlBarContainer>\n      <MapContainer>\n        <Map myLocation={myLocation} theirLocation={theirLocation} />\n      </MapContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}