{"version":3,"sources":["env.js","components/Map.jsx","components/DebouncedAlgoliaAddressInput.jsx","components/ControlBar.jsx","pages/MapPage.jsx","App.js","serviceWorker.js","index.js"],"names":["env","cleanEnv","process","REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE","str","require","REACT_APP_MAPBOX_API_KEY","REACT_APP_ALGOLIA_PLACES_APP_ID","REACT_APP_ALGOLIA_PLACES_API_KEY","REACT_APP_RADIUS_KM_OPTIONS","default","REACT_APP_RADIUS_KM_DEFAULT","num","MapBox","ReactMapboxGl","accessToken","INITIAL_BOUNDS","COVID_LOCKDOWN_CIRCLE_OPTIONS","steps","units","MAP_BOX_STYLES","myExclusiveAreaLinePaint","myExclusiveAreaFillPaint","theirExclusiveAreaLinePaint","theirExclusiveAreaFillPaint","inaccessibleAreaFillPaint","notFalsy","foo","Map","props","myLocation","theirLocation","radiusKm","bothLocationsSet","undefined","oneLocationSet","myLockdownArea","turf","theirLockdownArea","sharedLockdownArea","myExclusiveLockdownArea","theirExclusiveLockdownArea","allLockdownAreas","filter","inaccessibleArea","mapFocusProps","minLng","minLat","maxLng","maxLat","boundsPadding","fitBounds","useEffect","isOverlapping","distanceKm","Math","abs","ReactGA","event","category","action","value","style","containerStyle","flex","movingMethod","data","linePaint","fillPaint","places","algoliasearch","initPlaces","SEARCH_OPTIONS","hitsPerPage","language","countries","aroundLatLng","aroundRadius","InputContainer","styled","div","debouncedSearchPlaces","debounce","query","Promise","resolve","reject","search","err","res","x","placeToSuggestionString","place","locale_names","suburb","city","administrative","join","DebouncedAlgoliaAddressInput","onLocationSelected","placeholder","useState","mostRecentInput","setMostRecentInput","loadOptions","input","a","searchResponse","hits","map","label","onSuggestionSelected","selection","location","_geoloc","lng","lat","length","defaultOptions","onChange","isClearable","components","IndicatorSeparator","DropdownIndicator","ControlBarContentsContainer","LockdownRadiusLabel","ControlBar","myLocationSelected","theirLocationSelected","onSelectRadiusKm","radiusKmOptions","useMemo","split","Number","onRadiusKmOptionSelect","useCallback","radiusKmOptionIndex","Dropdown","Toggle","id","size","variant","Menu","onSelect","className","radiusKmOption","index","Item","eventKey","AppContainer","BannerContainer","MapContainer","MapPage","setMyLocation","setTheirLocation","useLocation","history","useHistory","paramValue","URLSearchParams","get","isNaN","selectedRadiusKm","push","library","add","faChevronDown","faChevronUp","initialize","pageview","window","pathname","App","basename","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.057313ea.chunk.js","sourcesContent":["import { str, num, cleanEnv } from \"envalid\";\n\nconst env = cleanEnv(process.env, {\n  REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE: str({ require: true }),\n  REACT_APP_MAPBOX_API_KEY: str({ require: true }),\n  REACT_APP_ALGOLIA_PLACES_APP_ID: str({ require: true }),\n  REACT_APP_ALGOLIA_PLACES_API_KEY: str({ require: true }),\n  REACT_APP_RADIUS_KM_OPTIONS: str({ require: true, default: \"5,10,15\" }),\n  REACT_APP_RADIUS_KM_DEFAULT: num({ require: true, default: 5 }),\n});\n\nexport default env;\n","import React, { useEffect } from \"react\";\nimport ReactMapboxGl, { GeoJSONLayer } from \"react-mapbox-gl\";\nimport * as turf from \"@turf/turf\";\nimport env from \"../env\";\nimport ReactGA from \"react-ga\";\n\nconst MapBox = ReactMapboxGl({\n  accessToken: env.REACT_APP_MAPBOX_API_KEY,\n});\n\nconst INITIAL_BOUNDS = [\n  [145.151596, -37.723742],\n  [144.793065, -37.927951],\n];\nconst BOUNDS_PADDING_KM_ONE_LOCATION = 5;\nconst BOUNDS_PADDING_KM_BOTH_LOCATIONS = 1;\nconst COVID_LOCKDOWN_CIRCLE_OPTIONS = { steps: 1_000, units: \"kilometers\" };\n\nconst MAP_BOX_STYLES = {\n  myExclusiveAreaLinePaint: {\n    \"line-color\": \"#5eb0c2\",\n    \"line-width\": 1,\n  },\n  myExclusiveAreaFillPaint: {\n    \"fill-color\": \"#5eb0c2\",\n    \"fill-opacity\": 0.25,\n  },\n  theirExclusiveAreaLinePaint: {\n    \"line-color\": \"#52bf83\",\n    \"line-width\": 1,\n  },\n  theirExclusiveAreaFillPaint: {\n    \"fill-color\": \"#52bf83\",\n    \"fill-opacity\": 0.25,\n  },\n  inaccessibleAreaFillPaint: {\n    \"fill-color\": \"black\",\n    \"fill-opacity\": 0.25,\n  },\n};\n\nconst notFalsy = foo => foo;\n\nconst Map = props => {\n  const { myLocation, theirLocation, radiusKm } = props;\n\n  const bothLocationsSet = myLocation !== undefined && theirLocation !== undefined;\n  const oneLocationSet = (myLocation !== undefined || theirLocation !== undefined) && !bothLocationsSet;\n\n  // Determine each users total lockdown area\n  const myLockdownArea = myLocation && turf.circle(myLocation, radiusKm, COVID_LOCKDOWN_CIRCLE_OPTIONS);\n  const theirLockdownArea = theirLocation && turf.circle(theirLocation, radiusKm, COVID_LOCKDOWN_CIRCLE_OPTIONS);\n\n  // Determine the shared lockdown area (if any)\n  const sharedLockdownArea = bothLocationsSet ? turf.intersect(myLockdownArea, theirLockdownArea) : undefined;\n\n  // Determine each users exclusive lockdown area (their entire lockdown area if only one provided)\n  const myExclusiveLockdownArea = bothLocationsSet\n    ? turf.difference(myLockdownArea, theirLockdownArea)\n    : myLockdownArea;\n  const theirExclusiveLockdownArea = bothLocationsSet\n    ? turf.difference(theirLockdownArea, myLockdownArea)\n    : theirLockdownArea;\n\n  // Combing all lockdown areas into one feature collection\n  const allLockdownAreas = turf.featureCollection(\n    [myExclusiveLockdownArea, theirExclusiveLockdownArea, sharedLockdownArea].filter(notFalsy)\n  );\n\n  // Determine everywhere that is not within either user's lockdown areas\n  const inaccessibleArea = turf.mask(allLockdownAreas);\n\n  // Determine the maps bounds\n  let mapFocusProps = {};\n\n  if (bothLocationsSet || oneLocationSet) {\n    // Zoom to fit both users lockdown areas\n    const [minLng, minLat, maxLng, maxLat] = turf.bbox(allLockdownAreas);\n    const boundsPadding = bothLocationsSet\n      ? turf.lengthToDegrees(BOUNDS_PADDING_KM_BOTH_LOCATIONS, \"kilometers\")\n      : turf.lengthToDegrees(BOUNDS_PADDING_KM_ONE_LOCATION, \"kilometers\");\n\n    mapFocusProps = {\n      fitBounds: [\n        [minLng - boundsPadding, minLat - boundsPadding],\n        [maxLng + boundsPadding, maxLat + boundsPadding],\n      ],\n    };\n  } else {\n    // Center map on the Melbourne CBD\n    mapFocusProps = {\n      fitBounds: INITIAL_BOUNDS,\n    };\n  }\n\n  // Record some basic analytics on the overlap (if the areas overlap, the distance)\n  useEffect(() => {\n    if (!bothLocationsSet) return;\n\n    try {\n      const isOverlapping = sharedLockdownArea !== null;\n      const distanceKm = Math.abs(turf.distance(myLocation, theirLocation));\n\n      ReactGA.event({\n        category: \"Location Overlaps\",\n        action: isOverlapping ? \"Locations overlapped\" : \"Locations didn't overlap\",\n        value: distanceKm,\n      });\n    } catch {}\n  }, [myLocation, theirLocation, bothLocationsSet, sharedLockdownArea]);\n\n  return (\n    <MapBox\n      // eslint-disable-next-line\n      style='mapbox://styles/mapbox/streets-v11'\n      containerStyle={{\n        flex: 1,\n      }}\n      movingMethod='flyTo' // ensures the map animates on location change\n      {...mapFocusProps}\n    >\n      <GeoJSONLayer\n        data={turf.featureCollection([myExclusiveLockdownArea].filter(notFalsy))}\n        linePaint={MAP_BOX_STYLES.myExclusiveAreaLinePaint}\n        fillPaint={MAP_BOX_STYLES.myExclusiveAreaFillPaint}\n      ></GeoJSONLayer>\n      <GeoJSONLayer\n        data={turf.featureCollection([theirExclusiveLockdownArea].filter(notFalsy))}\n        linePaint={MAP_BOX_STYLES.theirExclusiveAreaLinePaint}\n        fillPaint={MAP_BOX_STYLES.theirExclusiveAreaFillPaint}\n      ></GeoJSONLayer>\n      <GeoJSONLayer data={inaccessibleArea} fillPaint={MAP_BOX_STYLES.inaccessibleAreaFillPaint}></GeoJSONLayer>\n    </MapBox>\n  );\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\n\nimport AsyncSelect from \"react-select/async\";\nimport env from \"../env\";\nimport algoliasearch from \"algoliasearch\";\nimport debounce from \"debounce-promise\";\nimport styled from \"styled-components\";\nimport ReactGA from \"react-ga\";\n\n// Initialise the Algolia Places API\nvar places = algoliasearch.initPlaces(env.REACT_APP_ALGOLIA_PLACES_APP_ID, env.REACT_APP_ALGOLIA_PLACES_API_KEY);\n\nconst SEARCH_OPTIONS = {\n  hitsPerPage: 5,\n  language: \"en\",\n  countries: [\"au\"],\n  aroundLatLng: \"-37.816204,144.957489\", // Melbourne CBD\n  aroundRadius: 70_000, // 70kms\n};\n\nconst InputContainer = styled.div`\n  margin: 5px;\n`;\n\n/**\n * Performs an Algolia places search as a Promise.\n * @param {*} query the search text provided by the user\n */\nconst searchPlaces = (query) =>\n  new Promise((resolve, reject) => {\n    if (!query) {\n      resolve([]);\n      return;\n    }\n\n    ReactGA.event({\n      category: \"Debounced Algolia\",\n      action: \"Search API Called\",\n    });\n\n    places.search({ query, ...SEARCH_OPTIONS }, (err, res) => {\n      if (err) {\n        ReactGA.event({\n          category: \"Debounced Algolia\",\n          action: \"Search API Error Received\",\n        });\n\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n\n/**\n * Debounces the search to only run once every second. This drastically reduces the number of API calls and cost of running the site!\n */\nconst debouncedSearchPlaces = debounce(searchPlaces, 1_000);\n\nconst notFalsy = (x) => x;\n\n/**\n * Attempts to convert place into short human readable string.\n *\n * Some places have data filed incorrectly, e.g. some suburbs are listed as addresses in neighboring suburbs.\n * It is super weird.\n * @param {*} place\n */\nconst placeToSuggestionString = (place) => {\n  return [\n    place.locale_names ? place.locale_names[0] : undefined,\n    (place.suburb ? place.suburb[0] : undefined) || (place.city ? place.city[0] : undefined),\n    place.administrative ? place.administrative[0] : undefined,\n  ]\n    .filter(notFalsy)\n    .join(\", \");\n};\n\nconst DebouncedAlgoliaAddressInput = (props) => {\n  const { onLocationSelected, placeholder } = props;\n  const [mostRecentInput, setMostRecentInput] = useState(\"\"); // Tracked for analytics\n\n  const loadOptions = async (input) => {\n    setMostRecentInput(input);\n    const searchResponse = await debouncedSearchPlaces(input);\n    return searchResponse?.hits?.map((place) => ({\n      value: place,\n      label: placeToSuggestionString(place),\n    }));\n  };\n\n  const onSuggestionSelected = async (selection) => {\n    if (selection && selection != null) {\n      const place = selection.value;\n      const location = [place?._geoloc?.lng, place?._geoloc?.lat];\n\n      await onLocationSelected(location);\n\n      ReactGA.event({\n        category: \"Debounced Algolia\",\n        action: \"Suggestion selected\",\n        value: mostRecentInput?.length,\n      });\n    } else {\n      await onLocationSelected(undefined);\n      ReactGA.event({\n        category: \"Debounced Algolia\",\n        action: \"Suggestion cleared\",\n      });\n    }\n    setMostRecentInput(\"\");\n  };\n\n  return (\n    <InputContainer>\n      <AsyncSelect\n        defaultOptions\n        placeholder={placeholder}\n        loadOptions={loadOptions}\n        onChange={onSuggestionSelected}\n        isClearable={true}\n        components={{ IndicatorSeparator: null, DropdownIndicator: null }}\n      />\n    </InputContainer>\n  );\n};\n\nexport default DebouncedAlgoliaAddressInput;\n","import React, { useCallback, useMemo } from \"react\";\nimport DebouncedAlgoliaAddressInput from \"./DebouncedAlgoliaAddressInput\";\nimport styled from \"styled-components\";\nimport { Dropdown } from \"react-bootstrap\";\nimport env from \"../env\";\nimport \"./ControlBar.css\";\n\nconst ControlBarContentsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  max-width: 500px;\n  margin: 5px;\n`;\n\nconst InputContainer = styled.div`\n  margin: 5px;\n  text-align: right;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst LockdownRadiusLabel = styled.div`\n  font-size: 0.9em;\n  color: #6c757d;\n  margin: 0px 10px;\n`;\n\nconst ControlBar = props => {\n  const { myLocationSelected, theirLocationSelected, radiusKm, onSelectRadiusKm } = props;\n\n  const radiusKmOptions = useMemo(() => env.REACT_APP_RADIUS_KM_OPTIONS.split(\",\").map(Number), []);\n\n  const onRadiusKmOptionSelect = useCallback(\n    radiusKmOptionIndex => {\n      onSelectRadiusKm(radiusKmOptions[radiusKmOptionIndex]);\n    },\n\n    [radiusKmOptions, onSelectRadiusKm]\n  );\n\n  return (\n    <ControlBarContentsContainer>\n      <DebouncedAlgoliaAddressInput onLocationSelected={myLocationSelected} placeholder='Where do you live?' />\n      <DebouncedAlgoliaAddressInput onLocationSelected={theirLocationSelected} placeholder='Where do they live?' />\n      <InputContainer>\n        <LockdownRadiusLabel>Lockdown radius:</LockdownRadiusLabel>\n        <Dropdown>\n          <Dropdown.Toggle id='dropdown-basic' size='sm' variant='secondary'>\n            {radiusKm}km\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu onSelect={onRadiusKmOptionSelect} className='radius-dropdown'>\n            {radiusKmOptions.map((radiusKmOption, index) => (\n              <Dropdown.Item eventKey={index} onSelect={onRadiusKmOptionSelect} className='radius-dropdown__item'>\n                {radiusKmOption}km\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      </InputContainer>\n    </ControlBarContentsContainer>\n  );\n};\n\nexport default ControlBar;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport Map from \"../components/Map\";\nimport styled from \"styled-components\";\nimport ControlBar from \"../components/ControlBar\";\nimport ReactGA from \"react-ga\";\nimport env from \"../env\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useHistory, useLocation } from \"react-router\";\n\nconst AppContainer = styled.div`\n  height: 100vh;\n  position: absolute;\n  width: 100vw;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  overflow-y: scroll;\n`;\n\nconst BannerContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  justify-content: center;\n`;\n\nconst MapContainer = styled.div`\n  flex-grow: 1;\n  display: flex;\n  align-items: stretch;\n  justify-content: stretch;\n`;\n\nconst RADIUS_QUERY_PARAM = \"radius\";\n\nfunction MapPage() {\n  const [myLocation, setMyLocation] = useState(undefined);\n  const [theirLocation, setTheirLocation] = useState(undefined);\n\n  const location = useLocation();\n  const history = useHistory();\n\n  // Get the radius from search params or use defualt\n  const radiusKm = useMemo(() => {\n    const paramValue = new URLSearchParams(location.search).get(RADIUS_QUERY_PARAM);\n\n    return paramValue && !isNaN(paramValue) ? Number(paramValue) : env.REACT_APP_RADIUS_KM_DEFAULT;\n  }, [location.search]);\n\n  const onSelectRadiusKm = useCallback(\n    selectedRadiusKm => {\n      // Set the radius search param to selected value (or remove if default selected)\n\n      if (selectedRadiusKm !== env.REACT_APP_RADIUS_KM_DEFAULT) {\n        history.push(`/?${RADIUS_QUERY_PARAM}=${selectedRadiusKm}`);\n      } else {\n        history.push(`/`);\n      }\n    },\n    [history]\n  );\n\n  const onMyLocationSelected = location => {\n    setMyLocation(location);\n\n    if (location) {\n      ReactGA.event({\n        category: \"Location Selections\",\n        action: \"'My' location set\",\n      });\n    }\n  };\n\n  const onTheirLocationSelected = location => {\n    setTheirLocation(location);\n\n    if (location) {\n      ReactGA.event({\n        category: \"Location Selections\",\n        action: \"'Their' location set\",\n      });\n    }\n  };\n\n  return (\n    <AppContainer>\n      <BannerContainer>\n        <ControlBar\n          myLocationSelected={onMyLocationSelected}\n          theirLocationSelected={onTheirLocationSelected}\n          radiusKm={radiusKm}\n          onSelectRadiusKm={onSelectRadiusKm}\n        />\n      </BannerContainer>\n      <MapContainer>\n        <Map myLocation={myLocation} theirLocation={theirLocation} radiusKm={radiusKm} />\n      </MapContainer>\n    </AppContainer>\n  );\n}\n\nexport default MapPage;\n","import React from \"react\";\nimport ReactGA from \"react-ga\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nimport env from \"./env\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport MapPage from \"./pages/MapPage\";\n\n// Initialise Fontawesome\nlibrary.add(faChevronDown, faChevronUp);\n\n// Initialise Google Analytics\nReactGA.initialize(env.REACT_APP_GOOGLE_ANALYTICS_TRACKING_CODE);\nReactGA.pageview(window.location.pathname + window.location.search);\n\nfunction App() {\n  return (\n    <Router basename='/covid-5km-overlap-finder'>\n      <Switch>\n        <Route path='/'>\n          <MapPage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}